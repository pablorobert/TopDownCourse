//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/PlayerController.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace RPG
{
    public partial class @PlayerInput : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerController"",
    ""maps"": [
        {
            ""name"": ""PlayerController"",
            ""id"": ""16aa7486-da45-472d-b441-a72bdb9bdc70"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""6574f2ef-238e-4da3-aafb-ddcedb17c7b7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""c3398f4f-2f83-4a9f-b8ce-c09a7167aefa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Button"",
                    ""id"": ""ddbac208-b0f5-4ffe-a88d-70fd5d98d41c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Talk"",
                    ""type"": ""Button"",
                    ""id"": ""90146696-600a-40ee-9cbe-9b387be20e6b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Tool"",
                    ""type"": ""Button"",
                    ""id"": ""ba0e87bc-005e-4c47-a2cb-b6b7a2e10398"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Axe"",
                    ""type"": ""Button"",
                    ""id"": ""b175d3cb-e42d-467f-b52c-f49df4c113dc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shovel"",
                    ""type"": ""Button"",
                    ""id"": ""a6b90deb-d9d7-4dce-b0e5-dc8c00dda58e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""c31577ad-43d9-46bf-b60e-737b623d45bc"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0d5ccd1c-e863-4bb4-a508-67b715422f8a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""859a970f-4506-4e5e-b37c-a70f8304b963"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""160b9941-fdda-4771-a83d-12ceb9965c6e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c73c9ce2-a13e-408b-9ac1-f6b235cb55c5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""0087b557-82cc-448d-b09c-64d69ea0d3ba"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""e9fdda06-a72e-4b0a-936a-5fad1170277c"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""fae47011-4f4c-4878-b434-bdae95e698a4"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""153a9685-273e-440a-88e6-0a4a177b4020"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c4325715-e279-4d6a-b1fa-dc5165031ea3"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""694c7a32-1137-422b-af43-f35a7c0077e6"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f45f04dc-853e-4e13-9234-0e1f60a3a526"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""96769c2f-f477-45d7-a003-df73ef9035c5"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Talk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df47a146-b78f-47f7-b210-2201ea551e0c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Tool"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""70c099f2-a168-412a-ba1c-9ac2f5c83a92"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Axe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e3cc3be4-140a-4299-846a-6d951c591f71"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Shovel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard and Mouse"",
            ""bindingGroup"": ""Keyboard and Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // PlayerController
            m_PlayerController = asset.FindActionMap("PlayerController", throwIfNotFound: true);
            m_PlayerController_Movement = m_PlayerController.FindAction("Movement", throwIfNotFound: true);
            m_PlayerController_Run = m_PlayerController.FindAction("Run", throwIfNotFound: true);
            m_PlayerController_Roll = m_PlayerController.FindAction("Roll", throwIfNotFound: true);
            m_PlayerController_Talk = m_PlayerController.FindAction("Talk", throwIfNotFound: true);
            m_PlayerController_Tool = m_PlayerController.FindAction("Tool", throwIfNotFound: true);
            m_PlayerController_Axe = m_PlayerController.FindAction("Axe", throwIfNotFound: true);
            m_PlayerController_Shovel = m_PlayerController.FindAction("Shovel", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlayerController
        private readonly InputActionMap m_PlayerController;
        private IPlayerControllerActions m_PlayerControllerActionsCallbackInterface;
        private readonly InputAction m_PlayerController_Movement;
        private readonly InputAction m_PlayerController_Run;
        private readonly InputAction m_PlayerController_Roll;
        private readonly InputAction m_PlayerController_Talk;
        private readonly InputAction m_PlayerController_Tool;
        private readonly InputAction m_PlayerController_Axe;
        private readonly InputAction m_PlayerController_Shovel;
        public struct PlayerControllerActions
        {
            private @PlayerInput m_Wrapper;
            public PlayerControllerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_PlayerController_Movement;
            public InputAction @Run => m_Wrapper.m_PlayerController_Run;
            public InputAction @Roll => m_Wrapper.m_PlayerController_Roll;
            public InputAction @Talk => m_Wrapper.m_PlayerController_Talk;
            public InputAction @Tool => m_Wrapper.m_PlayerController_Tool;
            public InputAction @Axe => m_Wrapper.m_PlayerController_Axe;
            public InputAction @Shovel => m_Wrapper.m_PlayerController_Shovel;
            public InputActionMap Get() { return m_Wrapper.m_PlayerController; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerControllerActions set) { return set.Get(); }
            public void SetCallbacks(IPlayerControllerActions instance)
            {
                if (m_Wrapper.m_PlayerControllerActionsCallbackInterface != null)
                {
                    @Movement.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnMovement;
                    @Movement.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnMovement;
                    @Movement.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnMovement;
                    @Run.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnRun;
                    @Run.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnRun;
                    @Run.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnRun;
                    @Roll.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnRoll;
                    @Roll.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnRoll;
                    @Roll.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnRoll;
                    @Talk.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnTalk;
                    @Talk.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnTalk;
                    @Talk.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnTalk;
                    @Tool.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnTool;
                    @Tool.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnTool;
                    @Tool.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnTool;
                    @Axe.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnAxe;
                    @Axe.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnAxe;
                    @Axe.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnAxe;
                    @Shovel.started -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnShovel;
                    @Shovel.performed -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnShovel;
                    @Shovel.canceled -= m_Wrapper.m_PlayerControllerActionsCallbackInterface.OnShovel;
                }
                m_Wrapper.m_PlayerControllerActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Movement.started += instance.OnMovement;
                    @Movement.performed += instance.OnMovement;
                    @Movement.canceled += instance.OnMovement;
                    @Run.started += instance.OnRun;
                    @Run.performed += instance.OnRun;
                    @Run.canceled += instance.OnRun;
                    @Roll.started += instance.OnRoll;
                    @Roll.performed += instance.OnRoll;
                    @Roll.canceled += instance.OnRoll;
                    @Talk.started += instance.OnTalk;
                    @Talk.performed += instance.OnTalk;
                    @Talk.canceled += instance.OnTalk;
                    @Tool.started += instance.OnTool;
                    @Tool.performed += instance.OnTool;
                    @Tool.canceled += instance.OnTool;
                    @Axe.started += instance.OnAxe;
                    @Axe.performed += instance.OnAxe;
                    @Axe.canceled += instance.OnAxe;
                    @Shovel.started += instance.OnShovel;
                    @Shovel.performed += instance.OnShovel;
                    @Shovel.canceled += instance.OnShovel;
                }
            }
        }
        public PlayerControllerActions @PlayerController => new PlayerControllerActions(this);
        private int m_KeyboardandMouseSchemeIndex = -1;
        public InputControlScheme KeyboardandMouseScheme
        {
            get
            {
                if (m_KeyboardandMouseSchemeIndex == -1) m_KeyboardandMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and Mouse");
                return asset.controlSchemes[m_KeyboardandMouseSchemeIndex];
            }
        }
        public interface IPlayerControllerActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnRun(InputAction.CallbackContext context);
            void OnRoll(InputAction.CallbackContext context);
            void OnTalk(InputAction.CallbackContext context);
            void OnTool(InputAction.CallbackContext context);
            void OnAxe(InputAction.CallbackContext context);
            void OnShovel(InputAction.CallbackContext context);
        }
    }
}
